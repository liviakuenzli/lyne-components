// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include host-component-properties;

:host {
  --toast-color-default: var(--sbb-color-white-default);
  --toast-background-color: var(--sbb-color-midnight-default);
  --toast-border-radius: var(--sbb-border-radius-4x);
  --toast-gap: var(--sbb-spacing-fixed-2x);
  --toast-padding-block: var(--sbb-spacing-responsive-xxxs);
  --toast-padding-inline: var(--sbb-spacing-responsive-xs);
  --toast-margin: var(--sbb-spacing-responsive-s);
  --toast-max-width: #{px-to-rem-build(400)};
  --toast-width: #{calc(100% - (2 * var(--sbb-spacing-responsive-s-zero)))};
}

.overlay-hidden {
  display: none;
}

.toast-wrapper {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  contain: content;
  pointer-events: none;
}

.toast {
  @include text-s--bold;
  @include shadow-level-5-hard;
  @include absoluteCenterX;

  position: fixed;
  padding-block: var(--toast-padding-block);
  padding-inline: var(--toast-padding-inline);
  margin: var(--toast-margin) 0;
  width: calc(100% - (2 * var(--sbb-spacing-responsive-s-zero)));

  @include mq($from: small) {
    width: var(--toast-max-width);
  }

  display: flex;
  flex-direction: row;
  align-items: start;
  inset-block-end: 0;
  gap: var(--toast-gap);
  background: var(--toast-background-color);
  color: var(--toast-color-default);
  border-radius: var(--toast-border-radius);

  @include ifForcedColors {
    border: #{px-to-rem-build(1)} solid windowText;
  }
}

.toast-vertical-start {
  inset-block-start: 0;
  inset-block-end: auto;
}

.toast-horizontal-start {
  inset-inline-start: var(--toast-margin);
  transform: none;
}

.toast-horizontal-end {
  inset-inline-start: auto;
  inset-inline-end: var(--toast-margin);
  transform: none;
}

.toast.toast--button-icon {
  padding-inline-end: calc(
    (2 * var(--sbb-spacing-fixed-2x)) + var(--sbb-size-button-m-min-height-small)
  );
  @include mq($from: medium) {
    padding-inline-end: calc(
      (2 * var(--sbb-spacing-fixed-2x)) + var(--sbb-size-button-m-min-height-medium)
    );
  }

  .toast-spacer {
    display: none;
  }
}

.toast-text {
  word-break: break-all;
  flex-grow: 1;
}

.toast-button {
  @include buttonReset;

  color: var(--toast-color-default);
}

.toast-action,
.toast-action .toast-button {
  @include text-s--regular;

  margin-left: auto;
  cursor: pointer;
  pointer-events: all;
}

.toast-action-icon {
  @include absoluteCenterY;

  inset-inline-end: var(--sbb-spacing-fixed-2x);
}

.toast-link {
  color: var(--toast-color-default);
  text-decoration: none;
}

.toast-link:focus-visible,
.toast-button:focus-visible {
  outline: var(--sbb-border-width-1x) solid var(--toast-color-default);
  outline-offset: var(--sbb-border-width-2x);
}

.toast-label,
.toast-close {
  display: block;
  line-height: 1;

  svg {
    vertical-align: middle;
    fill: var(--toast-color-default);
    @include ifForcedColors {
      --toast-color-default: CanvasText;
    }
  }
}
